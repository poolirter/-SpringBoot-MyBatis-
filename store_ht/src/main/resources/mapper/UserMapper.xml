<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace属性：用于指定当前的映射文件和哪个接口进行映射，需要指定的接口的文件路径，需要标注包的完整路径接口-->
<mapper namespace="com.example.store_ht.Mapper.UserMapper">
    <!--  id 属性 ：表示映射的接口中方法的名称，直接在标签的内容部来编写sql语句-->
    <!--   useGeneratedKeys属性：表示开启某个字段的值递增(主键设置为递增)
           keyProperty属性：标签将表中的哪个字段作为主键递增
      -->

    <!--    自定义映射规则:resultMap标签来完成映射规则的定义-->
    <!--
            id属性：标签给这个映射负责分配一个唯一的id值，对应的就是resultMap=“id属性的值”属性的取值  即resultMap的名字
            type属性：取值是一个类，表示的是数据库中的查询结果与Java中哪一个实体类进行结果的映射
    -->
    <resultMap id="UserEntityMap" type="com.example.store_ht.Entity.User">
        <!--将表的资源和类的属性不一致的字段进行匹配指定，名称一致的字段可以省略不写   c:表中的属性   p：Java中的属性  配合完成名称不一致的映射-->
        <!--        在定义映射规则的时候主键是不可以省略的-->
        <id column="uid" property="uid"></id>
        <result column="is_delete" property="isDelete"></result>
        <result column="created_user" property="createdUser"></result>
        <result column="created_time" property="createdTime"></result>
        <result column="modified_user" property="modifiedUser"></result>
        <result column="modified_time" property="modifiedTime"></result>
    </resultMap>
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO t_user (username, password, salt, phone, email, gender, avatar, is_delete,
                            created_user, created_time, modified_user, modified_time)
        VALUES ( #{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avatar}, #{isDelete}
               , #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime})
    </insert>

    <!--    select语句在执行的时候，查询的结果是一个对象，多个对象-->
    <!--
            resultType:表示查询的结果类型，只需要指定对应的映射类型，并且包含完整包接口  注意：要表的字段与属性字段一致时使用 ，否则要使用resultMap
            resultMap：标签当表的资源和类的对象不一致时，来自定义映射规则
     -->
    <select id="findByUsername" resultMap="UserEntityMap">
        select *
        from t_user
        where username = #{username}
    </select>
    <update id="updatePasswordByUid">
        update t_user
        set password=#{password},
            modified_user=#{modifiedUser},
            modified_time=#{modifiedTime}
        where uid = #{uid}
    </update>
    <select id="findByUid" resultMap="UserEntityMap">
        select *
        from t_user
        where uid = #{uid}
    </select>
    <update id="updateUser">
        update t_user
        -- if 表示条件判断标签，test接收的是一个返回值为Boolean类型的条件，test为true则执行
        set
        <if test="phone!=null">phone=#{phone},</if>
        <if test="email!=null">email=#{email},</if>
        <if test="gender!=null">gender=#{gender},</if>
        modified_user=#{modifiedUser},
        modified_time=#{modifiedTime}
        where uid = #{uid}
    </update>
    <update id="updateAvatarByUid">
        update t_user
        set avatar=#{avatar},
            modified_user=#{modifiedUser},
            modified_time=#{modifiedTime}
        where uid = #{uid}
    </update>
</mapper>
